           # Retrieve existing sensor and binary sensor entities
            existing_sensors = hass.data.get("sensor")
            existing_sensors = existing_sensors.entities if existing_sensors else {}

            # Create a dictionary of existing sensors using their unique_id
            existing_sensor_dict = {
                sensor.unique_id: sensor for sensor in existing_sensors
            }

            # print(existing_sensors)

            existing_binary_sensors = hass.data.get("binary_sensor")
            existing_binary_sensors = (
                existing_binary_sensors.entities if existing_binary_sensors else {}
            )

            existing_binary_sensor_dict = {
                sensor.unique_id: sensor for sensor in existing_binary_sensors
            }

            # print(existing_binary_sensors)

            platform = async_get_platforms(hass, "sensor")


            for room, status in statuses.items():
                entity_id = "sensor.my_rest_sensor"
                if hass.states.get(entity_id):
                    print(f"{entity_id} exists!")
                else:
                    print(f"{entity_id} does not exist!")



                if room in existing_sensor_dict:
                    existing_sensor_dict[room].update_status(
                        status
                    )  # Ensure your class has an update method
                    print(f"Room {room}: {status} updated")
                else:
                    sensors.append(HotelRoomSensor(room, status))
                    print(f"Room {room}: {status} created")

            # Add new sensors if there are any
            if sensors:
                platform = async_get_platforms(hass, "sensor")
                if platform:
                    await platform[0].async_add_entities(sensors, True)

            platform2 = async_get_platforms(hass, "binary_sensor")

            # Create or update binary sensors
            binary_sensors = []
            for room, status in statuses.items():
                if room in existing_binary_sensor_dict:
                    existing_binary_sensor_dict[room].update_status(status)
                    print(f"Room {room}: {status} updated")
                else:
                    binary_sensors.append(HotelRoomStatusBinarySensor(room, status))
                    print(f"Room {room}: {status} created")

            if binary_sensors:
                platform2 = async_get_platforms(hass, "binary_sensor")
                if platform2:
                    await platform2[0].async_add_entities(binary_sensors, True)
